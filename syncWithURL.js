// Generated by CoffeeScript 1.10.0
(function() {
  var UrlSync;

  UrlSync = (function() {
    function UrlSync($location1) {
      this.$location = $location1;
    }

    UrlSync.prototype.addParams = function($scope, params) {
      var deregistrationFunctions, isArray, k, results, sv, v, wd;
      isArray = {};
      results = [];
      for (k in params) {
        v = params[k];
        isArray[k] = Object.prototype.toString.call(v) === '[object Array]';
        $scope[k] = v;
        if (this.$location.search()[k] != null) {
          sv = this.$location.search()[k];
          if (isArray[k] && Object.prototype.toString.call(sv) !== '[object Array]') {
            sv = [sv];
          }
          $scope[k] = sv;
        }
        wd = (function(f) {
          return function() {
            return {
              key: f,
              val: $scope[f]
            };
          };
        })(k);
        deregistrationFunctions = [];
        deregistrationFunctions.push($scope.$watch(wd, (function(_this) {
          return function(n, o) {
            return _this.$location.search(n.key, n.val);
          };
        })(this), true));
        results.push($scope.$on("$destroy", function() {
          var df, i, len, results1;
          console.log("scope destroyed, calling deregistration functions");
          results1 = [];
          for (i = 0, len = deregistrationFunctions.length; i < len; i++) {
            df = deregistrationFunctions[i];
            console.log("calling df", df);
            results1.push(df());
          }
          return results1;
        }));
      }
      return results;
    };

    return UrlSync;

  })();

  angular.module('sbMetadataApp').provider("SyncWithUrl", function() {
    var returnObj;
    returnObj = {};
    returnObj.$get = [
      '$location', function($location) {
        return new UrlSync($location);
      }
    ];
    return returnObj;
  });

}).call(this);
